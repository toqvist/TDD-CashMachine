/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cashmachine;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;


class AppTest {

    CashMachine cm;
    MockHardware hw;
    MockBank bank;

    @BeforeEach
    public void setUp () {
        cm = new CashMachine();
        hw = mock(MockHardware.class);
        bank = mock(MockBank.class);

        when(bank.getBalance()).thenReturn(100f);
        
    }

    // Login user using ID + PIN
    @Test void bankCanLoginUser () {
        bank = new MockBank();
        assertTrue(bank.validPin(hw.getCardID(), "0000"));

        bank.setCorrectPin("1234");
        assertTrue(bank.validPin(hw.getCardID(), "1234"));
    }


    // Bank should lock card if too many attempts have been made
    // Locked card should deny unlocks even with valid pin
    @Test void bankCanLockCard () {
        bank = new MockBank();

        assertFalse(bank.validPin(hw.getCardID(), "9999"));
        assertFalse(bank.validPin(hw.getCardID(), "9998"));
        assertFalse(bank.validPin(hw.getCardID(), "9997"));

        assertTrue(bank.cardIsLocked(hw.getCardID()));
        assertFalse(bank.validPin(hw.getCardID(), "0000"));
    }

    // Can check balance from bank account
    @Test void bankCanReturnBalance () {
        bank = new MockBank();
        assertEquals(1000, bank.getBalance());
    }

    // Can withdraw money
    // Verify that withdraw function on bank is run
    @Test void bankCanWithdrawMoney () {
        when(bank.withdraw(50)).thenReturn((float) 50); 
        bank.withdraw(50);
        verify(bank).withdraw(50);

        bank = new MockBank();
        bank.setBalance(100);
        bank.withdraw(50);
        assertEquals(bank.getBalance(), 50);   
    }

    // Can deposit money
    // Verify that deposit function on bank is run
    @Test void bankCanDepositwMoney () {
        when(bank.deposit(50)).thenReturn((float) 150); 
        bank.deposit(50);
        verify(bank).deposit(50);

        bank = new MockBank();
        bank.setBalance(100);
        bank.deposit(50);
        assertEquals(bank.getBalance(), 150);   
    }

    @Test void bankDeniesIfWithdrawalTooHigh () {
        bank = new MockBank();
        float before = bank.getBalance();
        bank.withdraw(50000);
        float after = bank.getBalance();
        assertEquals(before, after);

    }
    
}
